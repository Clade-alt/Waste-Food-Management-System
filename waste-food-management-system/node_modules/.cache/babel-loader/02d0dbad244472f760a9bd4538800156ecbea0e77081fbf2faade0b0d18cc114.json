{"ast":null,"code":"// Import All Dependencies\nconst dotenv = require('dotenv');\nconst express = require('express');\nconst bcryptjs = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst cookieParser = require('cookie-parser');\nconst apiRouter = require('./routes/api');\nconst app = express();\n\n// Configure ENV File & Require Connection File\ndotenv.config({\n  path: './config.env'\n});\nrequire('./db/conn');\nconst port = process.env.PORT || 3000;\n\n// Require Model\nconst Users = require('./models/userSchema');\nconst Admins = require('./models/adminSchema');\nconst Message = require('./models/msgSchema');\nconst Donation = require('./models/donationSchema');\nconst FoodReq = require('./models/foodreqSchema');\nconst IndustryP = require('./models/industrypSchema');\nconst authenticate = require('./middleware/authenticate');\n\n//These methods are used to get data and cookies from frontend\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: false\n}));\napp.use(cookieParser());\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\n// Sign Up\napp.post('/signup', async (req, res) => {\n  try {\n    //Get body or data\n    const {\n      fullname,\n      email,\n      password,\n      address,\n      contactnum\n    } = req.body;\n    const createUser = new Users({\n      fullname: fullname,\n      email: email,\n      password: password,\n      address: address,\n      contactnum: contactnum\n    });\n\n    // Save method is used to create user\n    // But before saving, password will be hashed\n    // After hashing, it will be saved to DB\n    const created = await createUser.save();\n    console.log(created);\n    res.status(200).send('Sign Up Complete');\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Login User\napp.post('/login', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n\n    // Find user if exists\n    const user = await Users.findOne({\n      email: email\n    });\n    if (user) {\n      // Verify Password\n      const isMatch = await bcryptjs.compare(password, user.password);\n      if (isMatch) {\n        // Generate Token which is defined in user schema\n        const token = await user.generateToken();\n        res.cookie('jwt', token, {\n          // Expires Token in 24 hours\n          expires: new Date(Date.now() + 86400000),\n          httpOnly: true\n        });\n        res.status(200).send('Login Successful');\n      } else {\n        res.status(400).send('Invalid Credentials');\n      }\n    } else {\n      res.status(400).send('Invalid Credentials');\n    }\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Admin Signup\napp.post('/adminsignup', async (req, res) => {\n  try {\n    //Get body or data\n    const {\n      fullname,\n      email,\n      password,\n      address,\n      contactnum\n    } = req.body;\n    const createAdmin = new Admins({\n      fullname: fullname,\n      email: email,\n      password: password,\n      address: address,\n      contactnum: contactnum\n    });\n    const created = await createAdmin.save();\n    console.log(created);\n    res.status(200).send('Sign Up Complete');\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Admin Login\napp.post('/adminlogin', async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n\n    // Find admin if exists\n    const admin = await Admins.findOne({\n      email: email\n    });\n    if (admin) {\n      // Verify Password\n      const isMatch = await bcryptjs.compare(password, admin.password);\n      if (isMatch) {\n        // Generate Token which is defined in admin schema\n        const token = await admin.generateToken();\n        res.cookie('jwt', token, {\n          // Expires Token in 24 hours\n          expires: new Date(Date.now() + 86400000),\n          httpOnly: true\n        });\n        res.status(200).send('Login Successful');\n      } else {\n        res.status(400).send('Invalid Credentials');\n      }\n    } else {\n      res.status(400).send('Invalid Credentials');\n    }\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Logout User or Admin\napp.get('/logout', (req, res) => {\n  try {\n    res.clearCookie('jwt');\n    res.status(200).send('Logged out Successfully');\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\n// Middleware for displaying User Information\napp.get('/userdata', authenticate, (req, res) => {\n  res.send(req.rootUser);\n});\n\n// API routes\napp.use('/api', apiRouter);\n\n// Server Listening\napp.listen(port, () => {\n  console.log(`Server running at port ${port}`);\n});","map":{"version":3,"names":["dotenv","require","express","bcryptjs","jwt","cookieParser","apiRouter","app","config","path","port","process","env","PORT","Users","Admins","Message","Donation","FoodReq","IndustryP","authenticate","use","json","urlencoded","extended","get","req","res","send","post","fullname","email","password","address","contactnum","body","createUser","created","save","console","log","status","error","user","findOne","isMatch","compare","token","generateToken","cookie","expires","Date","now","httpOnly","createAdmin","admin","clearCookie","rootUser","listen"],"sources":["F:/Projects/waste-food-management-system/waste-food-management-system/src/components/Dashboard.jsx"],"sourcesContent":["// Import All Dependencies\r\nconst dotenv = require('dotenv');\r\nconst express = require('express');\r\nconst bcryptjs = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst cookieParser = require('cookie-parser');\r\nconst apiRouter = require('./routes/api');\r\n\r\nconst app = express();\r\n\r\n// Configure ENV File & Require Connection File\r\ndotenv.config({ path: './config.env' });\r\nrequire('./db/conn');\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Require Model\r\nconst Users = require('./models/userSchema');\r\nconst Admins = require('./models/adminSchema');\r\nconst Message = require('./models/msgSchema');\r\nconst Donation = require('./models/donationSchema');\r\nconst FoodReq = require('./models/foodreqSchema');\r\nconst IndustryP = require('./models/industrypSchema');\r\nconst authenticate = require('./middleware/authenticate');\r\n\r\n//These methods are used to get data and cookies from frontend\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('Hello World');\r\n});\r\n\r\n// Sign Up\r\napp.post('/signup', async (req, res) => {\r\n  try {\r\n    //Get body or data\r\n    const { fullname, email, password, address, contactnum } = req.body;\r\n\r\n    const createUser = new Users({\r\n      fullname: fullname,\r\n      email: email,\r\n      password: password,\r\n      address: address,\r\n      contactnum: contactnum,\r\n    });\r\n\r\n    // Save method is used to create user\r\n    // But before saving, password will be hashed\r\n    // After hashing, it will be saved to DB\r\n    const created = await createUser.save();\r\n    console.log(created);\r\n    res.status(200).send('Sign Up Complete');\r\n  } catch (error) {\r\n    res.status(400).send(error);\r\n  }\r\n});\r\n\r\n// Login User\r\napp.post('/login', async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    // Find user if exists\r\n    const user = await Users.findOne({ email: email });\r\n    if (user) {\r\n      // Verify Password\r\n      const isMatch = await bcryptjs.compare(password, user.password);\r\n\r\n      if (isMatch) {\r\n        // Generate Token which is defined in user schema\r\n        const token = await user.generateToken();\r\n        res.cookie('jwt', token, {\r\n          // Expires Token in 24 hours\r\n          expires: new Date(Date.now() + 86400000),\r\n          httpOnly: true,\r\n        });\r\n        res.status(200).send('Login Successful');\r\n      } else {\r\n        res.status(400).send('Invalid Credentials');\r\n      }\r\n    } else {\r\n      res.status(400).send('Invalid Credentials');\r\n    }\r\n  } catch (error) {\r\n    res.status(400).send(error);\r\n  }\r\n});\r\n\r\n// Admin Signup\r\napp.post('/adminsignup', async (req, res) => {\r\n  try {\r\n    //Get body or data\r\n    const { fullname, email, password, address, contactnum } = req.body;\r\n\r\n    const createAdmin = new Admins({\r\n      fullname: fullname,\r\n      email: email,\r\n      password: password,\r\n      address: address,\r\n      contactnum: contactnum,\r\n    });\r\n\r\n    const created = await createAdmin.save();\r\n    console.log(created);\r\n    res.status(200).send('Sign Up Complete');\r\n  } catch (error) {\r\n    res.status(400).send(error);\r\n  }\r\n});\r\n\r\n// Admin Login\r\napp.post('/adminlogin', async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    // Find admin if exists\r\n    const admin = await Admins.findOne({ email: email });\r\n    if (admin) {\r\n      // Verify Password\r\n      const isMatch = await bcryptjs.compare(password, admin.password);\r\n\r\n      if (isMatch) {\r\n        // Generate Token which is defined in admin schema\r\n        const token = await admin.generateToken();\r\n        res.cookie('jwt', token, {\r\n          // Expires Token in 24 hours\r\n          expires: new Date(Date.now() + 86400000),\r\n          httpOnly: true,\r\n        });\r\n        res.status(200).send('Login Successful');\r\n      } else {\r\n        res.status(400).send('Invalid Credentials');\r\n      }\r\n    } else {\r\n      res.status(400).send('Invalid Credentials');\r\n    }\r\n  } catch (error) {\r\n    res.status(400).send(error);\r\n  }\r\n});\r\n\r\n// Logout User or Admin\r\napp.get('/logout', (req, res) => {\r\n  try {\r\n    res.clearCookie('jwt');\r\n    res.status(200).send('Logged out Successfully');\r\n  } catch (error) {\r\n    res.status(500).send(error);\r\n  }\r\n});\r\n\r\n// Middleware for displaying User Information\r\napp.get('/userdata', authenticate, (req, res) => {\r\n  res.send(req.rootUser);\r\n});\r\n\r\n// API routes\r\napp.use('/api', apiRouter);\r\n\r\n// Server Listening\r\napp.listen(port, () => {\r\n  console.log(`Server running at port ${port}`);\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}