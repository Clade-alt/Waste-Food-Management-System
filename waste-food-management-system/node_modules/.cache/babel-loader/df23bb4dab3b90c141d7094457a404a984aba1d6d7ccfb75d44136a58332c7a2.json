{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\waste-food-management-system\\\\waste-food-management-system\\\\src\\\\authContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create the authentication context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Define the AuthProvider component\nexport function AuthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  // Use state to keep track of the user's login status\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  // Define the login function that sets isLoggedIn to true\n  function login() {\n    setIsLoggedIn(true);\n  }\n\n  // Define the logout function that sets isLoggedIn to false\n  function logout() {\n    setIsLoggedIn(false);\n  }\n\n  // Provide the authentication context to the rest of the application\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n// Define the useAuth hook to access the authentication context\n_s(AuthProvider, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","isLoggedIn","setIsLoggedIn","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["F:/Projects/waste-food-management-system/waste-food-management-system/src/authContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\n// Create the authentication context\r\nconst AuthContext = createContext();\r\n\r\n// Define the AuthProvider component\r\nexport function AuthProvider({ children }) {\r\n  // Use state to keep track of the user's login status\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  // Define the login function that sets isLoggedIn to true\r\n  function login() {\r\n    setIsLoggedIn(true);\r\n  }\r\n\r\n  // Define the logout function that sets isLoggedIn to false\r\n  function logout() {\r\n    setIsLoggedIn(false);\r\n  }\r\n\r\n  // Provide the authentication context to the rest of the application\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\n// Define the useAuth hook to access the authentication context\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,EAAE;;AAEnC;AACA,OAAO,SAASM,YAAYA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACvC;EACA,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,SAASW,KAAKA,CAAA,EAAG;IACfD,aAAa,CAAC,IAAI,CAAC;EACrB;;EAEA;EACA,SAASE,MAAMA,CAAA,EAAG;IAChBF,aAAa,CAAC,KAAK,CAAC;EACtB;;EAEA;EACA,oBACEP,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,UAAU;MAAEE,KAAK;MAAEC;IAAO,CAAE;IAAAJ,QAAA,EACxDA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAE3B;;AAEA;AAAAX,EAAA,CAtBgBF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAuB5B,OAAO,SAASe,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAOpB,UAAU,CAACG,WAAW,CAAC;AAChC;AAACiB,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}