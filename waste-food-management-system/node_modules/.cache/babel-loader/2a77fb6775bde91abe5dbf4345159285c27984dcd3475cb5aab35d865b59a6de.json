{"ast":null,"code":"var _jsxFileName = \"F:\\\\Projects\\\\waste-food-management-system\\\\waste-food-management-system\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// Import necessary dependencies\nimport { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\nimport Chart from 'chart.js';\nimport { useAuth } from './authContext';\nimport { getChartData } from './api';\n\n// Define the dashboard page component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [chartData, setChartData] = useState(null);\n\n  // Retrieve the data from the API when the component mounts\n  useEffect(() => {\n    async function fetchData() {\n      const data = await getChartData();\n      setChartData(data);\n    }\n    fetchData();\n  }, []);\n\n  // Create the chart when the data is available\n  useEffect(() => {\n    if (chartData) {\n      const chart = new Chart('myChart', {\n        type: 'bar',\n        data: {\n          labels: chartData.labels,\n          datasets: [{\n            label: 'Data',\n            data: chartData.data,\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgba(255, 99, 132, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }, [chartData]);\n\n  // Render the chart and any other relevant information\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"myChart\",\n        width: \"400\",\n        height: \"400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n// Define the routes for the dashboard page\n_s(Dashboard, \"uZS1SAFq3R9tm1PvWKfNXEaYmJQ=\", false, function () {\n  return [useAuth];\n});\n_c = Dashboard;\nfunction DashboardRoutes() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/dashboard\",\n      element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c2 = DashboardRoutes;\nexport default DashboardRoutes;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dashboard\");\n$RefreshReg$(_c2, \"DashboardRoutes\");","map":{"version":3,"names":["useState","useEffect","Route","Chart","useAuth","getChartData","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","isLoggedIn","chartData","setChartData","fetchData","data","chart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","children","fileName","_jsxFileName","lineNumber","columnNumber","id","width","height","_c","DashboardRoutes","path","element","_c2","$RefreshReg$"],"sources":["F:/Projects/waste-food-management-system/waste-food-management-system/src/components/Dashboard.jsx"],"sourcesContent":["// Import necessary dependencies\r\nimport { useState, useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Chart from 'chart.js';\r\nimport { useAuth } from './authContext';\r\nimport { getChartData } from './api';\r\n\r\n// Define the dashboard page component\r\nfunction Dashboard() {\r\n  const { isLoggedIn } = useAuth();\r\n  const [chartData, setChartData] = useState(null);\r\n\r\n  // Retrieve the data from the API when the component mounts\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const data = await getChartData();\r\n      setChartData(data);\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Create the chart when the data is available\r\n  useEffect(() => {\r\n    if (chartData) {\r\n      const chart = new Chart('myChart', {\r\n        type: 'bar',\r\n        data: {\r\n          labels: chartData.labels,\r\n          datasets: [{\r\n            label: 'Data',\r\n            data: chartData.data,\r\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n            borderColor: 'rgba(255, 99, 132, 1)',\r\n            borderWidth: 1\r\n          }]\r\n        },\r\n        options: {\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [chartData]);\r\n\r\n  // Render the chart and any other relevant information\r\n  return (\r\n    <>\r\n      {isLoggedIn && (\r\n        <div>\r\n          <h1>Dashboard</h1>\r\n          <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// Define the routes for the dashboard page\r\nfunction DashboardRoutes() {\r\n  return (\r\n    <>\r\n      <Route path=\"/dashboard\" element={<Dashboard />} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DashboardRoutes;"],"mappings":";;AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,KAAK,QAAQ,kBAAkB;AACxC,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,YAAY,QAAQ,OAAO;;AAEpC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAW,CAAC,GAAGR,OAAO,EAAE;EAChC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACAC,SAAS,CAAC,MAAM;IACd,eAAec,SAASA,CAAA,EAAG;MACzB,MAAMC,IAAI,GAAG,MAAMX,YAAY,EAAE;MACjCS,YAAY,CAACE,IAAI,CAAC;IACpB;IAEAD,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAd,SAAS,CAAC,MAAM;IACd,IAAIY,SAAS,EAAE;MACb,MAAMI,KAAK,GAAG,IAAId,KAAK,CAAC,SAAS,EAAE;QACjCe,IAAI,EAAE,KAAK;QACXF,IAAI,EAAE;UACJG,MAAM,EAAEN,SAAS,CAACM,MAAM;UACxBC,QAAQ,EAAE,CAAC;YACTC,KAAK,EAAE,MAAM;YACbL,IAAI,EAAEH,SAAS,CAACG,IAAI;YACpBM,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,uBAAuB;YACpCC,WAAW,EAAE;UACf,CAAC;QACH,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACDC,WAAW,EAAE;YACf;UACF;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACf,SAAS,CAAC,CAAC;;EAEf;EACA,oBACEN,OAAA,CAAAE,SAAA;IAAAoB,QAAA,EACGjB,UAAU,iBACTL,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAClB1B,OAAA;QAAQ2B,EAAE,EAAC,SAAS;QAACC,KAAK,EAAC,KAAK;QAACC,MAAM,EAAC;MAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAU;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAE1D,iBACA;AAEP;;AAEA;AAAAtB,EAAA,CArDSD,SAAS;EAAA,QACON,OAAO;AAAA;AAAAiC,EAAA,GADvB3B,SAAS;AAsDlB,SAAS4B,eAAeA,CAAA,EAAG;EACzB,oBACE/B,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACEtB,OAAA,CAACL,KAAK;MAACqC,IAAI,EAAC,YAAY;MAACC,OAAO,eAAEjC,OAAA,CAACG,SAAS;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG,iBAClD;AAEP;AAACQ,GAAA,GANQH,eAAe;AAQxB,eAAeA,eAAe;AAAC,IAAAD,EAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAL,EAAA;AAAAK,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}